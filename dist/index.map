{"version":3,"sources":["core_modules/logger.js","module_resources/utils.js","src/core_modules/web_socket.js","core_modules/data_storage.js","src/core_modules/pipe_manager.js","src/core_modules/raw_analyzer.js","src/module_resources/global_params.js","core_modules/ui.js","core_modules/state_machine.js","module_bundle.js","wrtsm.js","module_resources/state_machine_elements.js","scripts/rose_gait_workflows.js","module_resources/sounds.js","module_resources/script_loader.js","index.js"],"names":["makeLogger","tag","stuff","console","log","join","logger","register","global_debug","util","set_debug","b","bug","i","debug","msg","avg","arr","sum","length","variance","Math","pow","std","sqrt","take","coll","num","ret","Array","fill","arr_mult","x","map","y","perf","f","num_times","results","t0","performance","now","t1","range","a","len","first","d","last","zip","xs","ys","dict_2_vec","k","push","number_or_self","val","Number","isNaN","d_map","dict_vals_2_num","diff","r","max","curr_max","min","curr_min","dom","s","document","createElement","set_inner_html","thang","HTMLElement","appendChild","innerHTML","flex_row","id_base","container","style","html","make_div_array","m","n","id","fn","new_id_base","row","col","el","id_from_loc","c","test_div_array","toString","app_clear","app","getElementById","firstChild","removeChild","app_render","colors","get_colors","web_socket","url","connection","default_handler","data","data_handler","conn","WebSocket","addEventListener","event","send_json","type","bind","JSON","parse","func","obj","send","stringify","data_storage","name","session_id","Date","toISOString","data_history","part_counter","save_interval_id","loaded_session","playback_speed_multiplier","stream_index","to_save","localStorage","setItem","rate","setInterval","flush_data","clearInterval","get_session","buffer_size","streaming","zero_time_axis","diffs","speed","start_stream_loop","stop_stream","delay","mod","setTimeout","t_1","csvContent","keys","Object","sort","dev","row_content","key","encodedUri","encodeURI","link","setAttribute","click","dataStr","encodeURIComponent","downloadAnchorNode","make_json_input","get_session_part_names","filter","includes","parts_names","tmp","getItem","merged","concat","apply","file_cb","evt","target","files","fname","replace","reader","FileReader","onloadend","readyState","DONE","result","readAsText","pipe_manager","from","to","set_data_handler","process_data","raw_analyzer","data_buffer","report","get_report","e","g_hist","g_line","get_field_average","obj_array","utils","params","global_x_len","make_y_series","make_x_series","create_multi_line_graph","opts","x_len","series_array","title","series_len","source","Bokeh","ColumnDataSource","p","Plotting","figure","sizing_mode","glyph","multi_line","field","line_color","add_tools","HoverTool","tooltips","line_policy","plot","bokeh_multi_stream","ds","xss","yss","shift","setv","silent","trigger","Graph","series_vector","parent","multi_opts","background_fill_color","background_fill_alpha","border_fill_color","border_fill_alpha","multi_line_graph","show","ui","graphs","last_series_buffer","graph","graph_array","n_cols","n_rows","ceil","app_el","index","render_into_element","get_data_source","series_buffer","series","state_machine","gui_mode","debug_mode","init","sensor_buffer_size","buffer","default_data_obj","sensors","transitioners","transitioner_groups","STATE","sensors_gui_buffer","ui_mapping","state","sensor_order","l1","level","l","NaN","set_sensor_order","add_graph","slice","get_sensor_last_N","transitioner","detector","applicator","group","group_status","sensor_id","run_sensor","transitioner_id","update_buffer_with_data_object","run_sensors","run_transitioner","handle_sensor_buffer","time","random_data_obj","random","count","mods","wrtsm","window","sme","dev_a","dev_b","field_diff","is_dev_b","is_dev_a","buf","test_turn_on","is_on","test_turn_off","flow","test_storage_persist","ws","pm","connect","start_saving","stop_saving","test_storage_replay","load_session","ra","start_stream","test_state_machine","rg","sm","initialize","add_sensor","add_transitioner","test_state_machine_gui","init_gui","playback_gui","graph_dances","g1","counter","acc_x","sin","acc_y","graph_sm_test","sizes","size","test_cycle","run_debug_cycle","bar_graph","EW","sounds","ctx","AudioContext","osc","freq","gainVal","gain","createOscillator","frequency","value","createGain","destination","start","beep_time","beep_dic","beep","stop","load_script","cb","script","onreadystatechange","onload","src","getElementsByTagName","load_css","rel","href","load_api","ls","Event","dispatchEvent"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["\nexport function makeLogger(tag) { \n    return function(...stuff) { \n\tconsole.log(\"[\" + tag + \"]:: \" + stuff.join())\n    }\n} \n\n\nvar logger = {} \n\nlogger.register = function(tag) { \n    logger[tag] = makeLogger(tag)\n} \n\n\nexport {logger}  \n","//Tue Oct  2 18:06:09 PDT 2018\n//General JS utils file \n//would like to try creating soft?hard? links so that the utils files can be shared \n\nimport {logger} from \"../core_modules/logger.js\"\n\n\nvar global_debug = true \n\nvar util = {} \n\nutil.set_debug = function(b) { \n    global_debug = b \n} \n\nutil.bug = function(tag,...msg) { \n    if (global_debug) { \n\tconsole.log(\"<- \" + tag + \" ->\" )\n\tfor (var i = 0 ; i < msg.length ; i++) { \n\t    console.log(msg[i])\n\t}\n\tconsole.log(\"<- \" + tag + \" ->\" )\n    }\n}\n\nlogger.register(\"bug\") \n\nutil.debug = function(msg) { \n    if (global_debug) {\n\tlogger.bug(msg)\n    }\n}\n\n\n\nutil.avg = function(arr) { \n    var sum = 0;\n    for( var i = 0; i < arr.length; i++ ){\n\tsum += arr[i]\n    }\n    return sum/arr.length \n}\n\n\nutil.variance = function(arr) { \n    var avg = util.avg(arr)\n    var sum = 0 \n    for( var i = 0; i < arr.length; i++ ){\n\tsum += Math.pow(arr[i] - avg, 2)\n    }\n    return sum/arr.length \n} \n\n\nutil.std = function(arr) { \n    return Math.sqrt(util.variance(arr))\n} \n\nutil.take = function(coll,num) { \n    var ret = Array(num).fill(0) \n    for (var i =0;i<num; i++) { \n\tret[i] = coll[i]\n    }\n    return ret \n} \n\nutil.arr_mult = function(arr,x) { \n    return arr.map( y => y /x ) \n}\n\nutil.perf = function(f) { \n    var num_times = 20000\n    var results = Array(num_times).fill(0) \n    for (i = 0 ; i < num_times ; i++ ) { \n\tvar t0 = performance.now();\n\tvar result = f() \n\tvar t1 = performance.now();\n\tresults[i] = t1 - t0 \n    } \n    return avg(results) \n} \n\nutil.range = function(a,b) { \n    var len = b - a \n    var ret = Array(len).fill(0)  ; \n    for (var i = 0 ; i< len ; i++) {  \n\tret[i] = a + i \n    }\n    return ret \n    \n} \n\nutil.first = function(d) { \n    return d[0]\n} \n\n\nutil.last = function(d) { \n    return d[d.length - 1 ] \n} \n\n\nutil.zip = function(xs,ys) { \n        return xs.map(function(x,i) { \n\t    return [x, ys[i]]\n\t}) \n}\n\nutil.dict_2_vec = function(d) { \n    var ret = [] ; \n    for (var k in d) { \n\tret.push([ k, d[k] ]) \n    } \n    return ret \n}\n\nutil.number_or_self = function(d) { \n    var val = Number(d) \n    if (isNaN(val)) {\n\treturn d \n    } else { \n\treturn val \n    } \n}\n\nutil.d_map = function(d,f) { \n    for (var k in d) {\n\td[k] = f(d[k])\n    }\n    return d \n}\n\nutil.dict_vals_2_num = function(d) { \n    return util.d_map(d,number_or_self) \n}\n    \n\nutil.diff = function(d) { \n    var r =   Array(d.length - 1).fill(0) \n    for (var i = 1 ; i < d.length ; i ++ ) { \n\tr[i-1] = d[i] - d[i-1]\n    }\n    return r \n}\n\n\nutil.max = function(d) { \n    var curr_max = d[0] \n    \n    for (var i=1;i<d.length;i++) { \n\tif (d[i] > curr_max) { curr_max = d[i] }\n    } \n    \n    return curr_max \n} \n\n\nutil.min = function(d) { \n    var curr_min = d[0] \n    \n    for (var i=1;i<d.length;i++) { \n\tif (d[i] < curr_min) { curr_min = d[i] }\n    } \n    \n    return curr_min\n    \n} \n\n\n\n// define ui utilities now ------------> \n\n\n\n\nutil.dom = function(s) { \n    return document.createElement(s) \n} \n\nutil.set_inner_html = function(d,thang) { \n    if (thang instanceof HTMLElement) { \n\td.appendChild(thang) \n    } else { \n\td.innerHTML = thang \n    } \n    \n} \n\nutil.flex_row = function(num,id_base,f) { \n    var container, i \n\n    container = util.dom(\"div\")  \n    //container.className = \"flex-row\"  // see styles.css   \n    \n    container.style = \"display : flex ; flex-wrap : nowrap ; flex-direction : row ; flex-grow : 1 \"\n        \n    for (i =0 ; i < num ; i ++ ) { \n\tvar d = util.dom(\"div\") \n\td.style = \"flex-grow : 1\"\n\tvar html = f(i,d) \n\tif (html) { \n\t    util.set_inner_html(d, html) \n\t} \n\tcontainer.appendChild(d) \n    } \n\t\n    return container  \n     \n}\n\n\n/* \n * Create a flexbox of divs [m,n] in shape \n * @param {Function} f - accepts row, column, and HTMLelement. Can either mutate the el or return an new el (which will be appended to div at spot r,c) or return String (which will be set to innerHTML) \n */ \nutil.make_div_array = function(m,n,id_base,f) { \n    var container, i \n    \n    container = util.dom(\"div\")  \n    //container.className = \"flex-column\"  // see styles.css  \n    container.id = id_base \n    \n    container.style = \"width: 100% ; height : 100% ; display : flex ; flex-wrap : nowrap ; flex-direction : column \"\n    \n    // now we will add in the child elements \n    for (i =0 ; i < m ; i ++ ) { \n\t\n\t//f is a function which takes a row and column and element \n\t//build a function that takes just a col with row hard coded \n\t//and returns f(r,col)\n\tvar fn = function(col,el) {\n\t    return f(i,col,el) \n\t}\n\t\n\tvar new_id_base = id_base + \"_\" +  i + \",\" \n\tvar row = util.flex_row(n,new_id_base , fn )\n\tcontainer.appendChild(row) \n    }\n    \n    return container\n    \n\n} \n\nutil.id_from_loc = function(m,n,c) { \n    return c*m + n   // intersing that this function needs arg c, which is (static) number of cols \n}\n\nutil.test_div_array = function(m,n) { \n    var f = function(r,c,el) { \n\treturn (util.id_from_loc(r,c,n)).toString()\n    } \n\n    return util.make_div_array(m,n,\"foo\", f) \n    \n} \n\t\n\nutil.app_clear = function() { \n    var app = document.getElementById(\"app\");\n    while (app.firstChild) {\n\tapp.removeChild(app.firstChild);\n    }   \n}\n\nutil.app_render = function(el) { \n    util.app_clear() \n    var app = document.getElementById(\"app\")  \n    app.appendChild(el) \n}\n\n\nvar colors = [\"black\" , \"blue\" , \"red\" , \"green\" , \"yellow\" , \"orange\"]\n\nutil.get_colors = function(num) { \n    return util.take(colors, num) \n}\n\n\n///   extensions \n\n\n// Array.prototype.first = function(arr) { \n//     return arr[0] \n// }\n\n\nexport {util} \n","// Sat Sep 29 18:31:15 PDT 2018\n\nimport {makeLogger} from \"./logger.js\"\nimport util from \"../module_resources/utils.js\"\n\n/**\n * Manages the websocket connection to an incoming data stream.\n *\n * @param {String} url - The websocket url to connect to, e.g. ws://localhost:1234\n */\nexport default class web_socket {\n    \n    constructor(url) { \n\tthis.url = url ;  \n\tthis.connection = null ;  \n\tthis.log = makeLogger(\"WS\")\n\tthis.default_handler = function(data) { \n\t    this.log(\"No data handler has been defined!\") \n\t} \n\tthis.data_handler = this.default_handler \n    } \n    \n    \n    /**\n     * Connect to remote websocket server. Upon success, registers the websocket connection\n     * as \"client\" with the server, enables streaming, and this.logs to console. \n     */ \n    connect() { \n\tvar conn  = new WebSocket(this.url) ; \n\t// Connection opened\n\tconn.addEventListener('open', (function (event) {\n\t    this.log(\"Connection to \" + this.url + \" successful. Registering client with server.\")\n\t    this.send_json({type: \"register\" , data : \"client\" })\n\t    this.send_json({type: \"control\"  , data : \"start\"  }) \n\t}).bind(this)) //bind is necessary for web_socket class vs WebSocket instance! \n\n\t\n\t// Listen for messages\n\tconn.addEventListener('message', (function (event) {\n\t    //this.log(\"Received msg: \" + event.data) \n\t    this.data_handler(util.dict_vals_2_num(JSON.parse(event.data))) //parse json and convert nums\n\t}).bind(this)) //bind is necessary for web_socket class vs WebSocket instance! \n\t\n\tthis.connection = conn ; \n    } \n    \n    /** \n     * Start accepting incoming raw data objects.\n     */ \n    start_stream() { \n\tthis.send_json({type : \"control\" , data : \"start\" } ) \n    }\n\n    /** \n     * Stop accepting incoming raw data objects.\n     */ \n    stop_stream() { \n\tthis.send_json({type : \"control\" , data : \"stop\" } ) \n    }\n\n    /** \n     * Sets the data_handler attribute, which determines what the socket does to incomin data.\n     * @param {Function} func - Function which accepts ONE raw data object {..} and processes it.\n     */ \n    set_data_handler(func) { \n\tthis.data_handler = func ; \n    }\n\n    /** \n     * Sends JSON data through socket. \n     * @param {Object} obj - Data object to send \n     */ \n    send_json(obj) { \n\tthis.connection.send(JSON.stringify(obj))\n    }\n\n    \n    \n}\n\n","//Tue Oct  2 10:12:11 PDT 2018\n\nimport {makeLogger} from \"./logger.js\"\nimport {util} from \"../module_resources/utils.js\"\n\n/**\n * \n * \n */\n\nexport default class data_storage {\n\n    /**\n     * Manages data persistence and replay/simulation. Uses browser based local storage. \n     * @param {String} name - Session identifier, use null for default time string\n     */ \n    constructor(name) { \n\tthis.session_id = name || (new Date()).toISOString()\n\tthis.data_history = [] \n\tthis.part_counter = 1 \n\tthis.save_interval_id = null \n\tthis.loaded_session = null \n\tthis.playback_speed_multiplier = 1\n\t\n\tthis.log = makeLogger(\"DS\")\n\tthis.default_handler = function(data) { \n\t    this.log(\"No data handler has been defined!\") \n\t} \n\tthis.data_handler = this.default_handler \n\tthis.stream_index = 0 \n    } \n    \n    /**\n     *  Persists a chunk of data to localStorage. Uses session name + part_number as identifier\n     */ \n    flush_data() { \n\tvar to_save = JSON.stringify(this.data_history)\n\tname    = this.session_id + \"_part\" + this.part_counter.toString() \n\tthis.data_history = [] \n\tlocalStorage.setItem(name, to_save) \n\tthis.part_counter += 1 \n\tthis.log(\"Saved data chunk: \" + name ) \n    } \n    \n    /**\n     * Start saving data to localStorage. Data is saved in chunks called 'parts'. \n     * @param {Number} rate - The rate to flush data to localStorage in SECONDS \n     */ \n    start_saving(rate) { \n\tthis.save_interval_id = setInterval(  (function(){this.flush_data()}).bind(this) , rate*1000)\n\tthis.log(\"Saving started for session: \" + this.session_id) \n    } \n\n    /**\n     * Stop saving data to localStorage\n     */ \n    stop_saving() { \n\tclearInterval(this.save_interval_id) \n\tthis.log(\"Saving stopped for session: \" + this.session_id) \n    } \n    \n    /** \n     * Main data handler. Will append the incoming data to the data_history array \n     * @param {Object} obj - The data obj to add \n     */\n    process_data(obj) { \n\tthis.data_history.push(obj) \n    } \n\n    /** \n     * Loads a data storage session from localStorage. Returns Array. \n     */\n    load_session() { \n\tthis.log(\"Loading session...\")\n\tthis.loaded_session = get_session(this.session_id)  // see definition below \n\tthis.stream_index = 0 \n\tthis.buffer_size = this.loaded_session.length\n\tthis.streaming = false \n\tthis.zero_time_axis() \n\tthis.diffs = util.diff( this.loaded_session.map( d => d[\"time\"] )  )\n\tthis.log(\"Session loaded: \" + this.session_id) \n    } \n\n\n    /** \n     * Set the data_handler for data replay/simulation \n     * @param {Function} f - The data handler function  \n     */\n    set_data_handler(f) { \n\tthis.data_handler = f \n    } \n    \n    /** \n     * Start streaming the session that was previously loaded from localStorage \n     */\n    start_stream(speed) { \n\tthis.stream_index =  0 \n\tthis.streaming = true \n\tthis.playback_speed_multiplier = speed || 1 \n\tthis.start_stream_loop() \n\n    } \n    \n    /** \n     * Stream single packet\n     */\n    stream_single_packet() { \n\tif (this.stream_index < this.buffer_size  ) { \t\n\t    //get the data\n\t    var val = this.loaded_session[this.stream_index]\n\t    //send the data\n\t    this.data_handler(val) \n\t    //increment the stream index \n\t    this.stream_index += 1 \n\t    return val \n\t} else { \n\t    this.stop_stream() \n\t} \n\t\n\n    } \n    \n    \n    /** \n     * Helper function for start_stream() \n     */\n    start_stream_loop() { \n    \t//when starting, this.index is 0, this.diffs is defined \n\tif (this.streaming) { \n\t    //get the data\n\t    var val = this.loaded_session[this.stream_index]\n\t    //send the data\n\t    this.data_handler(val) \n\t    \n\t    if (this.stream_index == this.buffer_size - 1 ) { \n\t\t//on the last data point  \n\t\t//significant b/c the diff array is finished \n\t\t//so we stop streaming \n\t\tthis.stop_stream() \n\t\t\n\t    } else { \n\t\t//not on the last data point \n\t\t//now acces the next diff \n\t\tvar delay = this.diffs[this.stream_index]\n\t\t//increment the stream_index \n\t\tthis.stream_index += 1 \n\t\t//schedule the loop again \n\t\tvar mod =  this.playback_speed_multiplier \n\t\tsetTimeout( (function() {this.start_stream_loop()}).bind(this) , delay*mod)\n\t    }\n\t    \n\t}\n\t\n    }\n\t\t\n    \n    /** \n     * Zero the time axis of the data session \n     */\n    zero_time_axis() { \n\tthis.log(\"Zeroing time axis\") \n\tif (!this.loaded_session.length) { \n\t    throw(\"Session must be loaded!\")\n\t} else { \n\t    //get first time point \n\t    var t_1  = util.first(this.loaded_session)[\"time\"] \n\t    //now we subtract t_1 from all time points \n\t    this.loaded_session.map( function(d) { \n\t\td[\"time\"] = d[\"time\"] - t_1 \n\t\treturn d \n\t    })\n\t    this.log(\"Done\")\n\t}\n\t\n    } \n\n\n\n    /** \n     * Stop streaming the session that was previously loaded from localStorage \n     */\n    stop_stream() { \n\tthis.streaming = false \n\tthis.stream_index =  0 \n\tthis.log(\"Stream finished.\") \n    } \n\n    \n    \n    /** \n     * Makes csv string from this.loaded_session \n     */\n    to_csv(name) { \n\tthis.log(\"Creating csv file for: \" + this.session_id) \n\tlet csvContent = \"data:text/csv;charset=utf-8,\";\n\t\n\t//figure out the keys in the data objects \n\tlet keys = Object.keys(this.loaded_session[0]).sort()\n\t\n\t//write csv header \n\tcsvContent += ( keys.join(\",\") + \"\\n\" ) \n\t\n\t//then loop through the structure \n\tfor (var i =0 ; i < this.loaded_session.length ; i ++) { \n\t    var data = this.loaded_session[i]\n\t    if (data.dev == \"B\" ) { \n\t\tvar row_content = []\n\t\t//loop through keys to build the row \n\t\tfor (var k = 0 ; k < keys.length ; k ++ ) { \n\t\t    var key = keys[k] \n\t\t    var val = data[key]\n\t\t    row_content.push(data[key]) \n\t\t}\n\t\tcsvContent += (row_content.join(\",\") + \"\\n\" ) \n\t    }\n\t} \n\t\n\tvar encodedUri = encodeURI(csvContent);\n\tvar link = document.createElement(\"a\");\n\tlink.setAttribute(\"href\", encodedUri);\n\tlink.setAttribute(\"download\", (name || this.session_id)   + \".csv\");\n\tlink.click();\n\t\n\t\n    } \n\n    /** \n     * Makes and downloads json string from this.loaded_session \n     */\n    to_json(name) { \n\tthis.log(\"Creating json file for: \" + this.session_id) \n\tvar dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.loaded_session)) \n\tvar downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\",     dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", (name || this.session_id) + \".json\");\n\tdownloadAnchorNode.click();\n    }\n    \n    \n    /** \n     * Loads json data into local storage \n     */\n    load_json() { \n\tvar i = make_json_input() \n\ti.click() \n\treturn i\n    }\n    \n    \n}\n\n\n// define some helpers \nfunction get_session_part_names(id) { \n    return Object.keys(localStorage).filter( s => s.includes(id) ).sort() \n} \n    \nfunction get_session(id) { \n    var parts_names = get_session_part_names(id) \n    // part names are sorted already \n    var tmp = parts_names.map( function(name) { \n\treturn JSON.parse(localStorage.getItem(name))\n    }) \n    \n    var merged = [].concat.apply([], tmp);\n    return merged \n}\n\n\nfunction file_cb(evt) { \n    var f = evt.target.files[0]\n    var fname = f.name.replace(\".json\",\"\")\n    var reader = new FileReader() \n    reader.onloadend = function(evt) { \n\tif (evt.target.readyState == FileReader.DONE) {\n\t    localStorage.setItem(fname, evt.target.result) \n\t    console.log(\"[DS]:: Saved item to local storage: \" + fname )\n\t} else { \n\t    console.log(\"[DS]:: error reading.. \") \n\t    console.log(evt) \n\t} \n    }\n    reader.readAsText(f) \n}\n\n\nfunction make_json_input() {\n    var i =   document.createElement(\"input\")\n    i.type = \"file\" \n    i.addEventListener(\"change\", file_cb ) \n    return i \n} \n","//Tue Oct  2 10:12:11 PDT 2018\n\nimport {makeLogger} from \"./logger.js\"\n\n/**\n * Manages the flow of streaming data between various modules of RoseGait\n * e.g. pipe_manager.connect(web_socket, data_storage) \n */\nexport default class pipe_manager {\n    \n    constructor() { \n\tthis.log = makeLogger(\"PM\")\n    } \n    \n    \n    /**\n     * Connects a streaming output data source to a streaming input source. \n     * @param {Object} from - data source (emits data). Must implement method `set_data_handler` \n     * and have member default_handler\n     * @param {Object} to -   data sink   (consumes data). Must implement method `process_data` \n     */ \n    connect(from, to) { \n\tfrom.set_data_handler(  (function(d) {to.process_data(d)}).bind(to) ) \n    } \n\n    /**\n     * Disconnects a streaming output data source from a streaming input source. \n     * @param {Object} from - data source (emits data). Must implement method `set_data_handler` \n     * and have member default_handler\n     * @param {Object} to -   data sink   (consumes data). Must implement method `process_data` \n     */ \n    disconnect(from, to) { \n\tfrom.set_data_handler(from.default_handler)\n    } \n\n    \n}\n\n\n\n\n","//Tue Oct  2 10:12:11 PDT 2018\n\nimport {makeLogger} from \"./logger.js\"\nimport util from \"../module_resources/utils.js\"\n\n/**\n * \n * \n */\n\nexport default class raw_analyzer {\n\n    /**\n     * Provides insights and attributes about raw data stream. \n     * e.g. checks for dropped samples \n     */ \n    constructor() { \n\tthis.data_history  =  [] \n\tthis.log = makeLogger(\"RA\")\n    } \n    \n    /**\n     * Processes a data packet \n     * @param {Object} obj - Data object to process \n     */ \n    process_data(obj) { \n\tthis.data_history.push(obj) \n\tthis.log(\"Received data!\") \n    } \n    \n    /**\n     * Produce report (logged to console for now) \n     */ \n    produce_report() { \n\tvar data_buffer = this.data_history \n\tvar report = get_report(data_buffer) \n\tthis.log(\"Printing report: \" ) \n\tthis.log(JSON.stringify(report) ) \n\treturn report \n    } \n    \n    /**\n     * (UNSTABLE ) Show ditribution for field  \n     */ \n    dist_field(f) { \n\t//clear_plot_div() \n\t\n\tvar data = this.data_history.map( e => e[f] ) \n\t\n\tg_hist(data,\"Distribution for: \" + f)     \n\t\n    }\n\n    /**\n     * (UNSTABLE) Show time series for field \n     */ \n    line_field(f) { \n\tvar data = this.data_history.map( e => e[f] ) \n\tg_line(data,\"Time series for: \" + f)     \n\t\n    }\n\n    \n} \n\n\n\nfunction get_field_average(obj_array,f) { \n    return  utils.avg(obj_array.map( obj => obj[f] )) \n} \n\n\n\n\nfunction get_report(data_buffer) { \n    return { \n\t    'len'       : data_buffer.length  , \n\t    'acc_x_avg' : get_field_average(data_buffer, \"acc_x\"), \n\t    'acc_y_avg' : get_field_average(data_buffer, \"acc_y\"), \n\t    'acc_z_avg' : get_field_average(data_buffer, \"acc_z\"), \n\t    'gyr_x_avg' : get_field_average(data_buffer, \"gyr_x\"), \n\t    'gyr_y_avg' : get_field_average(data_buffer, \"gyr_y\"),\n\t    'gyr_z_avg' : get_field_average(data_buffer, \"gyr_z\") \t    \n    }\n} \n\n","\n\n\nvar params = \n    { \n\tglobal_x_len : 200 \n\t\n\t\n\t\n    }\n\n\nexport { params } \n    \n","import {params} from \"../module_resources/global_params.js\" \nimport {util}     from \"../module_resources/utils.js\" \n\n\n\nfunction make_y_series(len) { \n    return Array(len).fill(0) \n}\n\nfunction make_x_series(len) { \n    return util.range(-len, 0).map( x => x/100 ) // the /100 is hax for now for streaming\n}\n\n\nfunction create_multi_line_graph(opts) { \n    var { x_len, series_array, title  } = opts \n    var series_len = series_array.length \n    \n    //make xs and ys vector \n    var xs = [] \n    var ys = [] \n    for (var i =0 ;i < series_len ; i++) { \n\txs.push(make_x_series(x_len))\n\tys.push(make_y_series(x_len))\n    } \n    \n    //make data source \n    var source = new Bokeh.ColumnDataSource( {\n\tdata : {xs : xs, ys : ys }\n    })\n    \n    // make the plot and add some tools\n    //var tools = \"pan,crosshair,wheel_zoom,box_zoom,reset,save\";\n\n    // WOW ! -- how lucky to find sizing_mode : stretch_both lmao \n    // https://github.com/bokeh/bokeh/issues/4958\n    \n    var p = Bokeh.Plotting.figure({ title: title,sizing_mode : 'stretch_both' })\n    \n     \n    //add the multiline \n    var glyph = p.multi_line({ field: \"xs\" }, { field: \"ys\" }, {\n\tsource: source,\n\tline_color: util.get_colors(series_len)\n    }) \n    \n    var tooltips = [\n\t[\"x\"    , \"$x\" ]  , \n\t[\"y\"    , \"$y\" ] \n    ]\n\n    p.add_tools(new Bokeh.HoverTool({tooltips : tooltips , line_policy : \"next\"} ) ) \n    \n    //NEXT STEP -- > NEXT STEP -- > NEXT STEP -- > NEXT STEP -- > NEXT STEP -- > \n    //Need to call Bokeh.Plotting.show(p , HTMLelement) \n    return { plot : p , glyph : glyph , source : source } \n\t     \n    \n} \n\n\n\n// Figured out this function by looking at bokeh source code \nvar bokeh_multi_stream = function(ds, x, ys) { \n    var data = ds.data \n    var xss = data.xs\n    var yss = data.ys \n    // make modifications \n\n    for(var i=0;i<yss.length;i++) {\n\t\n\t//NOTE* if one of the y values is false (or undefined) , then the assumption is that \n\t//the series at that index should NOT BE updated \n\t//Sensors in rosegait return false when they wish NOT to be updated \n\t\n\tif (ys[i]) {\n\t    // -  \n\t    xss[i].push(x)\n\t    xss[i].shift()\n\n\t    // -  \n\t    yss[i].push(ys[i])\n\t    yss[i].shift()\n\t    \n\t} \n    }\n    // re assign the data \n    data.xs = xss \n    data.ys = yss \n    ds.setv('data', data, {\n        silent: true\n    });\n    \n    return ds.trigger('stream');\n}\n\n// < -- START CLASS DEFINITIONS -- START CLASS DEFINITIONS -- START CLASS DEFINITIONS -- > \n\n/* \n * A bokeh real time, multi line graph \n *  \n */\nclass Graph { \n    constructor(opts) { \n\tvar {series_vector, title } = opts \n\tthis.parent = null \n\tthis.series_vector = series_vector \n\n\t\n\tvar multi_opts = { x_len : params.global_x_len , \n\t\t\t   title : title ,\n\t\t\t   series_array : series_vector } \n\t\n\tvar  {plot , glyph , source} = create_multi_line_graph(multi_opts) \n\t\n\tvar color = \"#e5efff\" // \"white\" //\"#003559\" //\"#B9D6F2\"\n\tvar alpha = 0.2 \n\tplot.background_fill_color = color\n\tplot.background_fill_alpha = alpha\n\n\tplot.border_fill_color = color\n\tplot.border_fill_alpha = alpha\n\n\tthis.multi_line_graph = plot \n\tthis.source = source \n\tthis.glyph  = glyph \n\t\n    } \n    \n    get_data_source() { \n\treturn this.source \n    } \n    \n    render_into_element(el) { \n\t//el.innerHTML = 'waiting'\n\t//this.parent = el \n\tBokeh.Plotting.show(this.multi_line_graph, el) \n    } \n    \n}\n\n\nexport default class ui { \n    \n    /* \n     * \n     * @param {HTMLElement} parent - The DOM to render the UI into \n     */ \n    constructor(parent) { \n\tthis.graphs = {} \n\tthis.parent = parent \n\tthis.last_series_buffer = {} // holds the previous update sent to graph \n    } \n\n    /* \n     * Add graph to the ui \n     * @param {String} id - graph id \n     * @param {Vector} series_vector - Ids for series which will be graphed on this graph \n     */\n    add_graph(id, series_vector) { \n\tvar graph = new Graph( {series_vector : series_vector, \n\t\t\t\ttitle  : id + \": \" + series_vector.join(\", \")} )   \n\t\t\t       \n\tthis.graphs[id] = graph \n    } \n    \n    /* \n     *\n     * After all graphs have been added, init is called to actually display the graphs \n     *\n     */\n    init(container) { \n\t// logic for displaying all of the added graphs \n\t// should make a panel view of sorts and initialize with empty values \n\tvar graph_array = util.dict_2_vec(this.graphs) \t\n\tthis.graph_array = graph_array  \n\t\n\t// for now will put two graphs side by side \n\tvar n_cols = 2 \n\tvar n_rows = Math.ceil(Object.keys(this.graphs).length/2) \n\t\n\t// some hax  \n\tif (graph_array.length == 1 ) { \n\t    n_cols = n_rows = 1 \n\t} \n\t\n\tutil.bug(\"n_row\" , n_rows) \n\t\n\t// make a grid of divs \n\tvar app_el = util.make_div_array(n_rows,n_cols,\"rgui\",function(r,c,el) { \n\t    //get the graph index\n\t    var index = util.id_from_loc(r,c,n_cols)\n\t    // debug - console.log( [index, graph_array] )\n\t    \n\t    if (index < graph_array.length ) { \n\t\t//get the graph info using destructuring \n\t\tvar [id , graph] = graph_array[index] \n\t\tgraph.render_into_element(el) \n\t    } else { \n\t\t\n\t\treturn \"\" \n\t\t\n\t    }\n\t    \n\t})\n\t\n\t//here we will resolve the container \n\tif ( typeof container == 'string' )  { \n\t    container = document.getElementById(container) \n\t}  // if not for now assume it is the element \n\t\n\t//render the \n\tapp_render(container,app_el)\n\n    } \n\n    /* \n     * Streams data to a particular graph defined by graph_id. \n     * @param {Number} x - The x coordinate for new data \n     * @param {Vector} ys - New y points to add. These should correspond to and be in the same order as the series_vector assoiated with the same graph id\n     */\n    stream_to_graph(id , x , ys ) { \n\tbokeh_multi_stream(this.graphs[id].get_data_source(), x , ys ) \n    }\n    \n    /* \n     * Main data handler. \n     * @param {Object} series_buffer - Dictionary with all the series values for updating\n     */\n    handle_sensor_buffer(x,series_buffer) { \n\t\n\t\n\t//1) loop through the available graphs\n\tfor (var graph in this.graphs ) { \n\t    var series, ys , i , val \n\t    //2) get the series_vector for that graph \n\t    series = this.graphs[graph].series_vector \n\t    //3) look up the values for each series in the sensor_gui_buffer\n\t    ys = Array(series.length).fill(0)\n\t    for (i = 0 ; i < series.length ; i++ ) { \n\t\t//get the value of the series \n\t\tval =  series_buffer[ series[i] ]  \n\t\t\n\t\t//if it is false we pass it anyways (graph will handle it) \n\t\tys[i] = val \n\t    }\n\t    //update the graph \n\t    \n\t    bokeh_multi_stream(this.graphs[graph].get_data_source(), x , ys )\n\n\t    \n\t}\n\n    }\n    \n    \n    \n    \n}\n\n\n\n\nvar app_el =  null \n\nvar app_clear = function() { \n    while (app_el.firstChild) {\n\tapp_el.removeChild(app_el.firstChild)  \n    }   \n}\n\nvar app_render = function(container,el) { \n    if (app_el) { \n\tapp_clear() \n    } else { \n\tcontainer.appendChild(el)\n\tapp_el = container\n    }\n}\n","//Wed Oct  3 09:42:59 PDT 2018\n// I remembered my development mantra - be patient. simplify. Refactor when necessary \n\nimport {makeLogger} from \"./logger.js\"\nimport ui from \"./ui.js\"\nimport {util} from \"../module_resources/utils.js\"\n\n/**\n * \n * \n */\n\nexport default class state_machine {\n\n    /**\n     * \n     * \n     */ \n    constructor(opts) { \n\tvar {buffer_size, gui_mode, debug_mode, init} = opts\n\tthis.log = makeLogger(\"SM\") \n\tthis.buffer_size = buffer_size \n\tthis.sensor_buffer_size = buffer_size \n\tthis.buffer = Array(buffer_size).fill(default_data_obj)\n\tthis.sensors = {} \n\tthis.transitioners = {} \n\tthis.transitioner_groups = {} \n\tthis.STATE  = init || {} \n\tthis.gui_mode = gui_mode \n\tthis.debug_mode = debug_mode || false \n\tif (gui_mode) { \n\t    //create the sensor_gui buffer \n\t    this.sensors_gui_buffer = {}\n\t    \n\t    this.ui_mapping = null\n\t    \n\t    //also create a ui object  \n\t    this.ui = new ui(null) \n\t} \n    } \n    \n    \n    /** \n     * Initializes the state machine\n     * @param {Object} state - the initial state for the state machine \n     */\n    initialize(state) { \n\tthis.STATE = state \n    } \n\n\n    /** \n     * Updates buffer with a data object. Uses js function `.shift()` to cycle array. \n     * @param {Object} obj - Data object to consume \n     */\n    update_buffer_with_data_object(obj) { \n\tthis.buffer.push(obj) \n\tthis.buffer.shift() \n    } \n    \n    /*\n     * Computes the order that sensors will be evaluated in \n     */\n    set_sensor_order() { \n\tvar compare = function(x,y) { \n\t    var l1 = x[1].level\n\t    var l2 = y[1].level\n\t    //console.log( [l1, l2] ) \n\t    if (l1 > l2 ) {   //index 2 is the level ! \n\t\treturn 1\n\t    } else  { \n\t\treturn -1\n\t    } \n\t}\n\tthis.sensor_order = util.dict_2_vec(this.sensors).sort(compare).map(e=>e[0])\n    }\n    \n    \n    /** \n     * Adds a sensor to the state machine. \n     * @param {Object} opts - contains id, f (function) , graph (if gui_mode). Graph should be id of the graph that the sensor should be graphed on \n     */\n    add_sensor(opts) { \n\tvar id,f,l\n\tid = opts.id ; f = opts.f ; l = opts.level \n\t//register the sensor \n\tthis.sensors[id] = {} \n  \t//add the function \n\tthis.sensors[id][\"function\"] = f \n\t//and then allocate a buffer for the sensor values \n\tthis.sensors[id][\"buffer\"] = Array(this.sensor_buffer_size).fill(NaN) \n\t//and then allocate the sensor level, 0 if undefined \n\tthis.sensors[id][\"level\"] = l || 0 \n\t//and create the 'last_skipped' flag (see run sensor for more information) \n\tthis.sensors[id][\"last_skipped\"] = false \n\tif (this.debug_mode) { \n\t    this.log(\"Added sensor: \" + id) \n\t}\n\tthis.set_sensor_order() \n    } \n    \n    /** \n     * \n     * Init gui \n     * @param {String|DOM} container - id or reference for container to render into \n     * @param {Object} ui_mapping - Dictionary where keys are graph ids and vals are vectors of the sensors which could be graphed on that graph. E.g { graph-1 : [\"acc_x\", \"acc_z\" ] , etc} \n     */\n    init_gui(container, ui_mapping) { \n\tthis.ui_mapping = ui_mapping \n\t//loop through the graphs \n\tfor (var graph in this.ui_mapping )  { \n\t    var sensors = this.ui_mapping[graph] \n\t    this.ui.add_graph(graph, sensors)  // initializes a graph \n\t} \n\t\n\t//after all the graphs have been added then we call init \n\tthis.ui.init(container) \n\t\n    } \n\n    \n    /** \n     * Runs the sensor function with the state machine buffer as input \n     * then updates the corresponding sensor's buffer.\n     * @param {String} id - Sensor id to run   \n     */\n    run_sensor(id) { \n\t//get the sensor function\n\tvar f = this.sensors[id][\"function\"]\n\t//run the sensor passing in the sm object\n\tvar val = f(this) \n\t\n\t/*\n\t  sensors \n\t  only append the value if it exists \n\t  this allows the ability for sensors to act simultaneously as data filters \n\t  by introspecting on the data_packet somehow and deciding to reject it from \n\t  their buffer. \n\t \n\t*/\n\t\n\tif (val) { \n\t    //append the new value to the sensors buffer \n\t    this.sensors[id][\"buffer\"].push(val)\n\t    this.sensors[id][\"buffer\"].shift() \n\t    this.sensors[id][\"last_skipped\"] = false \n\t}  else {\n\t    //the sensor rejected a value. In this case, it can be helpful to set a special \n\t    //flag in case there are sensors which derive from this one and also wish to \n\t    //reject \n\t    this.sensors[id][\"last_skipped\"] = true \n\t}\n\t\n\treturn val \n    } \n\n    /** \n     * Utility function for retrieving the last N values of a sensor's buffer\n     * Used to make it easier to write Detectors \n     * @param {String} id - Sensor id \n     * @param {Number} num - The number of values to retrieve from END of buffer \n     */\n    get_sensor_last_N(id,num) { \n\tif (this.sensors[id][\"last_skipped\"]) { \n\t    //we have skipped a value, so will pass that info on \n\t    return false \n\t} else { \n\t    return this.sensors[id][\"buffer\"].slice(this.buffer_size - num) \n\t}\n    }\n\n    /** \n     * Utility function for retrieving the last value of a sensor's buffer\n     * Used to make it easier to write Detectors \n     * @param {String} id - Sensor id \n     */\n    get_sensor_last_1(id) { \n\tif (this.sensors[id][\"last_skipped\"]) { \n\t    //we have skipped a value, so will pass that info on \n\t    return false \n\t} else { \n\t    return util.first(this.get_sensor_last_N(id, 1 ) )\n\t} \n    }\n    \n    /** \n     * Adds a transitioner to the state machine. \n     * @param {String} id - Transitioner id for reference \n     * @param {Object} transitioner - Transitioner implementation (Object with keys [detector, applicator]) The detector and applicator both  accept the state_machine object in its entirety in order to allow easy access to all fields. \n     */\n    add_transitioner(id,transitioner) { \n\t//make sure it has what we want \n\tif (! (transitioner.detector && transitioner.applicator ) ) { \n\t    throw \"Transitioner object does not contain both detector and applicator!\" \n\t} \n\t\n \t//register the transitioner\n\tthis.transitioners[id] = transitioner \n\t\n\t//if it is part of a group we register that too , and by default activate it \n\tif (transitioner.group) { \n\t    this.transitioner_groups[transitioner.group] = true \n\t}\n\t\n\tif (this.debug_mode) { \n\t    this.log(\"Added transitioner: \" + id) \n\t}\n\n    }\n    \n    /** \n     * Runs the transitioner \n     * @param {String} id - Transitioner to run \n     */\n    run_transitioner(id) { \n\t//get the transitioner  \n\tvar transitioner = this.transitioners[id] \n\t\n\t//get the group and group status\n\tvar group = transitioner.group\n\tvar group_status = this.transitioner_groups[group]\n\t\n\t//only run if group is NULL or if it exists and is TRUE \n\tif ( group_status != false ) {\n\t    \n\t    //get the detector and applicator \n\t    var detector = transitioner.detector \n\t    var applicator = transitioner.applicator \n\n\t    \n\t    //the detector and applicator both  accept the state_machine object in its entirety in order to allow easy access to all fields \n\t    //apply the applicator IF the detector returns true  \n\t    if (detector(this)) { \n\t\tif (this.debug_mode) { this.log(\":match: => \" + id) }\n\t\tapplicator(this)  // the applciator will actually mutate the this.STATE object  \n\t\t// deactivate this group if it is part of one\n\t\tif (group_status) { \n\t\t    this.transitioner_groups[group] = false \n\t\t} \n\t    } else { \n\t\tif (this.debug_mode) { this.log(\":fail: => \" + id) }\n\t    }\n\t    \n\t}\n\t\n    } \n    \n    \n    \n    /** \n     * Run all sensors. Will sort them by the sensor level \n     */\n    run_sensors() { \n\tfor (var i =0 ; i < this.sensor_order.length; i++ ) { \n\n\t    var sensor_id = this.sensor_order[i]\n\t    var val = this.run_sensor(sensor_id) \n\t    \n\t    if (this.debug_mode) {\n\t\tthis.log(\"Ran sensor: \" + sensor_id + \" with result: \" )\n\t\tthis.log(val)\n\t    }\n\t    \n\t    if (this.gui_mode){ \n\t\tthis.sensors_gui_buffer[sensor_id] = val \n\t    }\n\t}\n\t\n    }\n\n\n    /** \n     * Processes a data object, running one cycle of the state machine. \n     * @param {Object} obj - Data object to process \n     */\n    process_data(obj) { \n\t\n\t//1. update the data buffer  \n\tthis.update_buffer_with_data_object(obj) \n\t\n\t//2. now we need to update all of the sensors \n\tthis.run_sensors() \n\t\n\t//3. now we run all the transitioners (which rely on most up to date Sensor values) \n\tfor (var transitioner_id in this.transitioners ) { \n\t    this.run_transitioner(transitioner_id) \n\t} \n\t\n\t//at this point, this.STATE should be updated , one cycle of the state machine has been completed \n\t//in order to reset, we should return the state of all transition groups \n\tfor (var group in this.transitioner_groups) {\n\t    this.transitioner_groups[group] = true \n\t}\n\t\n\t\n\t// after all this is done we will update the ui \n\t//the sensors_gui_buffer is now full and updated and can be passed to the ui for processing \n\t//pass all the sensor data to the UI for updating \n\tif (this.gui_mode) { \n\t    // also we need to give an X coordinate for the data  \n\t    // for now we will pass the 'time' value of the data obj \n\t    this.ui.handle_sensor_buffer(obj.time,this.sensors_gui_buffer)\n\t}\n\n\t\n    } \n    \n    /** \n     * For debug purposes and profiling. Processes one cycle with a defualt data object\n     */\n    run_debug_cycle() { \n\tthis.process_data(random_data_obj()) \n    } \n    \n\n    \n}\n\n\nvar default_data_obj = { \n    'acc_x' : 0 , \n    'acc_y' : 0 , \n    'acc_z' : 0 , \n    'gyr_x' : 0 , \n    'gyr_y' : 0 , \n    'gyr_z' : 0 , \n    'sample': 0 , \n    'time'  : 0 , \n    'dev'   : \"B\" \n}\n\n\n//for generating random data packets \nvar m = Math.random \nvar count = 0 \nfunction random_data_obj() { \n    return {'acc_x' : m(),\n\t    'acc_y' : m(),\n\t    'acc_z' : m(), \n\t    'gyr_x' : m(), \n\t    'gyr_y' : m(), \n\t    'gyr_z' : m(),\n\t    'sample': count++ , \n\t    'dev'   : \"B\"}\n} \n","// bundles all the modules into one object for easy access \n// Mon Oct 22 22:16:23 PDT 2018\n\nimport web_socket from \"./core_modules/web_socket.js\" \nimport data_storage from \"./core_modules/data_storage.js\" \nimport pipe_manager from \"./core_modules/pipe_manager.js\" \nimport raw_analyzer from \"./core_modules/raw_analyzer.js\" \nimport state_machine from \"./core_modules/state_machine.js\" \nimport ui from \"./core_modules/ui.js\" \n\nexport var mods = { web_socket, data_storage , pipe_manager , raw_analyzer, state_machine, ui }\n\n","import {mods}  from  \"./module_bundle.js\"\n\n\n// defines object that will be attached to window \nvar wrtsm = {}  \n\n//give it modules\nwrtsm.mods = mods \n\n\n\n\n//add it to window \nwindow.wrtsm = wrtsm \n\n\n//export it for use \nexport { wrtsm } \n\n\n\n","//Fri Oct  5 19:31:23 PDT 2018\n\n// filefor collecting definitions of Sensors and transitioners\n\nimport {logger} from \"../core_modules/logger.js\"\nimport {util}     from \"./utils.js\"\n\nlogger.register(\"sme\") \n\nvar sme = { sensors : { dev_a : {} , dev_b : {} } , \n\t    transitioners : {} }  \n\n\n//extract a specific field from the data objects \n//i.e. [{:acc_x :acc_y... } , ... ] => [ acc_x, acc_x ... ] \nsme.sensors.field = function(field) { \n    return function(d) { \n\td = d.buffer \n\treturn util.last(buffer)[field] \n    }\n} \n\n//field diff will take the  diff of a particular field in the data object \nsme.sensors.field_diff = function(field) { \n    return function(d) { \n\td = d.buffer \n\tvar l = d.length \n\treturn d[l-1][field] - d[l-2][field]\n    }\n} \n\n\n\nsme.is_dev_b = function (d) { \n    return d.dev == \"B\" \n} \n\nsme.is_dev_a = function (d) { \n    return d.dev == \"A\" \n} \n\nsme.sensors.dev_b.field = function(field) { \n    //return sme.generic_filter(sme.is_dev_b , d=>d[field] ) \n    return function(d) {\n\tvar buf = d.buffer \n\tvar d = util.last(buf) \n\tif (d.dev == \"B\") { \n\t    return d[field]\n\t} else { \n\t    util.debug(\"filter miss\")\n\t    return false }\n    }\n}\n\nsme.transitioners.test_turn_on  = { \n    \"detector\" : function(state_machine) { \n\treturn !state_machine.STATE.is_on \n\t\n    } , \n    \"applicator\" : function(state_machine) { \n\tstate_machine.STATE.is_on = true \n\tif (state_machine.debug_mode ) { logger.sme(\"TURNED ON\") }\n    },\n    \"group\" : \"switch\" \n}\n\n\nsme.transitioners.test_turn_off  = { \n    \"detector\" : function(state_machine) { \n\treturn state_machine.STATE.is_on \n    } , \n    \"applicator\" : function(state_machine) { \n\tstate_machine.STATE.is_on = false  \n\tif (state_machine.debug_mode ) { logger.sme(\"TURNED OFF\") }\n    } , \n    \"group\" : \"switch\" \n}\n\n\n\n\nexport { sme } \n","1//Fri Oct  5 18:28:58 PDT 2018\n// workflows for RoseGait  \n\nimport util     from \"../module_resources/utils.js\"\nimport {sme}      from \"../module_resources/state_machine_elements.js\"\nimport {wrtsm}  from \"../wrtsm.js\"\nimport {logger} from \"../core_modules/logger.js\"\n\nlogger.register(\"rg\") \n\nvar flow = {} \n\nflow.test_storage_persist = function(name) { \n    //1. create web_socket object \n    ws = new wrtsm.mods.web_socket(\"ws://localhost:1234\") \n\n    //2. create data_storage object \n    ds = new wrtsm.mods.data_storage(name) \n\n    //3. create pipe manager object and connect 1 & 2 \n    pm = new wrtsm.mods.pipe_manager() \n    pm.connect(ws,ds) \n\n    //4. Enable saving on the data_storage object every 5s  \n    ds.start_saving(5) \n\n    //5. connect the websocket (which should automatically start receiving data) \n    ws.connect()\n    \n    //6. Stop streaming after 20s \n    setTimeout(function() { \n\tws.stop_stream() \n\tds.stop_saving() \n\tconsole.log(\"Streaming and saving stopped.\") \n    }, 21*1000)\n    \n} \n\n\nflow.test_storage_replay = function() { \n    //1. create data_storage object & load session \n    ds = new wrtsm.mods.data_storage(\"eugene_walk_rev\") \n    ds.load_session() \n    \n    //2. create raw_analyzer object \n    ra = new wrtsm.mods.raw_analyzer() \n\n    //3. create pipe manager object and connect 1 & 2 \n    pm = new wrtsm.mods.pipe_manager() \n    pm.connect(ds,ra) \n\n    //4. start the stream ! \n    ds.start_stream() \n    \n    return [ds,ra ] \n\n} \n\nflow.test_state_machine = function(n) {\n    logger.rg(\"Creating state machine with size: \" + n) \n    var sm = new wrtsm.mods.state_machine({buffer_size : n, gui_mode:  false } ) \n    sm.initialize({\"is_on\" : false }) \n    \n    logger.rg(\"Adding sensors\") \n    sm.add_sensor({id:\"acc_x\" , f:sme.sensors.field(\"acc_x\"), graph : \"g1\"})\n    sm.add_sensor({id: \"acc_x_diff\" ,f: sme.sensors.field_diff(\"acc_x\"), graph : \"g1\"})\n    \n    logger.rg(\"Adding transitioners\") \n    sm.add_transitioner(\"test_turn_on\", sme.transitioners.test_turn_on ) \n    sm.add_transitioner(\"test_turn_off\", sme.transitioners.test_turn_off ) \n    \n    // ok so at this point everything should be initialized and we should be able \n    // to start profiling and inspecing the state machine \n    logger.rg(\"Returning sm\") \n    return sm \n    \n    \n    \n} \n\n\nflow.test_state_machine_gui = function(d) {\n    var n = 200 \n    logger.rg(\"Creating state machine with size: \" + n) \n    var sm = new wrtsm.mods.state_machine({buffer_size : n, gui_mode:  true } ) \n    sm.initialize({\"is_on\" : false }) \n    \n    logger.rg(\"Adding sensors\") \n    sm.add_sensor({id:\"acc_x\" , f:sme.sensors.field(\"acc_x\"), graph : \"g1\"})\n    sm.add_sensor({id: \"acc_x_diff\" ,f: sme.sensors.field_diff(\"acc_x\"), graph : \"g1\"})\n    \n    logger.rg(\"Adding transitioners\") \n    sm.add_transitioner(\"test_turn_on\", sme.transitioners.test_turn_on ) \n    sm.add_transitioner(\"test_turn_off\", sme.transitioners.test_turn_off ) \n    \n    // ok so at this point everything should be initialized and we should be able \n    // to start profiling and inspecing the state machine \n\n    sm.init_gui(\"wrtsm\",d) \n\n    logger.rg(\"Returning sm\") \n    return sm \n    \n    \n    \n} \n\nflow.playback_gui = function(d) {\n    var n = 200 \n    logger.rg(\"Creating state machine with size: \" + n) \n    var sm = new wrtsm.mods.state_machine({buffer_size :n, gui_mode:  true, debug_mode : false }) \n    \n    logger.rg(\"Adding sensors\") \n    sm.add_sensor({id:\"dev_b_gyr_z\" , f:sme.sensors.dev_b.field(\"gyr_z\") })\n    //sm.add_sensor({id: \"acc_x_diff\" ,f: sme.sensors.field_diff(\"acc_x\")})\n    sm.add_sensor({id: \"acc_y\" ,f: sme.sensors.field(\"acc_y\")})\n    sm.add_sensor({id: \"gyr_z\" ,f: sme.sensors.field(\"gyr_z\")})\n\n    logger.rg(\"Adding transitioners\") \n    sm.add_transitioner(\"test_turn_on\", sme.transitioners.test_turn_on )\n    sm.add_transitioner(\"test_turn_off\", sme.transitioners.test_turn_off )\n\n\n    // ok so at this point state machine should be initialized \n    logger.rg(\"Calling sm.init_gui\") \n    sm.init_gui(\"wrtsm\", d) \n    \n    //will load the file from storage \n    var ds = new wrtsm.mods.data_storage(\"eugene_walk_rev\") \n    ds.load_session() \n    \n    //and then create a pipe manager to connect the stored data file to the state machine \n    var pm = new wrtsm.mods.pipe_manager() \n    pm.connect(ds,sm) \n    \n    //return them and can call ds.start_stream() for continuous simulation \n    //OR ds.stream_single_packet() to step one sample\n    return [ds, pm, sm ] \n\n} \n\n\nflow.graph_dances = function() { \n    var d = { g1 : [\"acc_x\", \"acc_y\"] } //, \"gyr_z\"] }  \n    //[sm,d] = test_state_machine_gui({ g1 : [\"acc_x\"] , g2 : [ \"acc_y\"] }) \n    var sm = flow.test_state_machine_gui(d) \n    //[sm,d] = test_state_machine_gui({ g1 : [\"acc_x\",  \"acc_y\"] , g2 : [  \"gyr_z\"] })\n    //util.app_render(test_div_array(1,2)) \n\n\n    var line_dance = function() { \n\tsm.ui.handle_sensor_buffer(200+speed*counter, {acc_x : 0.5*counter , acc_y : -0.5*counter})\n    }\n\n    var sine_rate = 2/100\n    var sine_rate_2 = 5/100\n    var sine_rate_3 = 7/100\n    var sine_dance_0 = function() { \n\tsm.ui.handle_sensor_buffer(200+speed*counter, {acc_x : Math.sin(sine_rate*counter) , acc_y : -Math.sin(sine_rate_2*counter)})\n    }\n\n    var sine_dance_1 = function() { \n\tsm.ui.handle_sensor_buffer(200+speed*counter, {acc_x : Math.sin(sine_rate*counter) , acc_y : -Math.sin(sine_rate_2*counter) , gyr_z : Math.sin(sine_rate_3*counter)})\n    }\n\n\n    var speed = 20\n    var counter = 0 \n    var a = setInterval( (function() { \n\tsine_dance_0()\n\tcounter++ \n    }), 50 ) \n    var stop = function() { \n\tclearInterval(a) \n    }\n\n    return [sm  , a,  stop ] \n\n}\n    \n\n\n// [0,1,2,3,4] \n//  [1,1,1,1] \n\nflow.graph_sm_test = function() { \n    //now we will loop and do the perf \n    var num = 200\n    var interval = 1\n    var start = 2\n    var sizes = Array(num).fill(0) \n    var results = Array(num).fill(0) \n    for (var i = 0; i < num ; i ++ ) { \n\tvar size = start + i * interval \n\tsizes[i] = size \n\t//create the sm \n\tvar sm = test_state_machine(size) \n\t\n\t//define the perf function \n\tvar test_cycle = ( function() { \n\t    sm.run_debug_cycle() \n\t}).bind(sm)\n\t\n\t//now we perf it \n\tresults[i] = util.perf(test_cycle)\n    } \n    \n    //at this point results should be full . \n    logger.rg(\"Graphing results... \") \n    bar_graph(\"Perf\" , \"size\", \"time\" , sizes, results ) \n    logger.rg(\"hmm.. ?\")\n}\n    \n    \n// want to be able to play back data \n/* \nA brief historical aside: \nat first I recorded the data withuot converting the Strings inside the objects to numbers \nTo solve, I loaded the recorded file, then mapped the conversion accross the loaded buffer \nThen I made a new wrtsm.mods.data storage object with _rev extension, and connecnted d1 to d2. \nThen I started d2.save and d1.stream \nvoila \n */ \n\nflow.EW = function() { \n    d = new wrtsm.mods.data_storage(\"eugene_walk_rev\") \n    d.load_session() \n    \n    //at this pt data is accesible in d.loaded_sesssion \n    return d \n} \n    \n\n\n\nexport {flow} \n\n","\nvar sounds = {} \nsounds.ctx = new AudioContext()\n\nsounds.osc = function(type , freq, gainVal){\n    var osc, gain \n    \n    osc = sounds.ctx.createOscillator()\n    osc.frequency.value = freq\n    gain = sounds.ctx.createGain()\n    osc.type = type\n    gain.connect(sounds.ctx.destination)\n    gain.gain.value = gainVal\n    osc.connect(gain)\n    osc.start()\n    return osc \n} \n\n\n\n\n\n\n\nvar beep_time = 150\nvar beep_dic = { 0 : 300 , 1 : 350 , 2 : 400 , 3 : 450 , 4 : 500 }\nfunction beep(n) { \n    var f = beep_dic[n]\n    var s = sounds.osc(\"sine\" , f , 1 ) \n    setTimeout( function() {s.stop() } , beep_time)\n}\n\n\nexport { beep } \n\n\n","export function load_script(url,cb){\n\n    var script = document.createElement(\"script\")\n    script.type = \"text/javascript\";\n\n    if (script.readyState){  //IE \n        script.onreadystatechange = function(){\n            if (script.readyState == \"loaded\" ||\n                    script.readyState == \"complete\"){\n                script.onreadystatechange = null;\n\t\tif (cb) { \n                    cb();\n\t\t}\n            }\n        };\n    } else {  //Others\n        script.onload = function(){\n\t    if (cb) {\n\t\tcb();\n\t    }\n        };\n    }\n\n    script.src = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n}\n\n\nexport function load_css(url,cb) { \n    \n    var link = document.createElement(\"link\")\n    link.type = \"text/css\";\n    link.rel = 'stylesheet';\n\n\n    if (link.readyState){  //IE \n        link.onreadystatechange = function(){\n            if (link.readyState == \"loaded\" ||\n                    link.readyState == \"complete\"){\n                link.onreadystatechange = null;\n\t\tif (cb) { \n                    cb();\n\t\t}\n            }\n        };\n    } else {  //Others\n        link.onload = function(){\n\t    if (cb) {\n\t\tcb();\n\t    }\n        };\n    }\n\n    link.href = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(link);\n}\n    \n","//The main program \n\n/* - - - - - - - */ \nconsole.log(\":: wrtsm initializing ::\")\n\n\nimport {wrtsm}  from  \"./wrtsm.js\"  //import global wrtsm object \nimport {flow}   from  \"./scripts/rose_gait_workflows.js\" \nimport {util}   from  \"./module_resources/utils.js\"\nimport {beep}   from  \"./module_resources/sounds.js\"\nimport {logger} from  \"./core_modules/logger.js\"\nimport {load_script, load_css} from  \"./module_resources/script_loader.js\"\n\n// set debug \nutil.set_debug(false)\n\n//make logger \nlogger.register(\"wrtsm\")\n\n/* additions to global context */ \nwrtsm.flow = flow \nwrtsm.util = util \nwrtsm.beep = beep \n\n\n\n// HANDLE BOKEH LOADING (load the content from cdn if Bokeh is not defined in the window) ======================================== > \nif (window.Bokeh) { \n    logger.wrtsm(\"Bokeh was detected already. If you experience any errors, please make sure that the following resources are included in your html for proper functionality:\")\n    console.log(\"<link rel=\\\"stylesheet\\\" href=\\\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css\\\" type=\\\"text/css\\\" />\")\n    console.log(\"<script type=\\\"text/javascript\\\" src=\\\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.js\\\"></script>\")\n    console.log(\"<script type=\\\"text/javascript\\\" src=\\\"https://cdn.pydata.org/bokeh/release/bokeh-api-0.12.5.min.js\\\"></script>\")\n} else { \n    //will dynamically load the above resources: \n    //define callback \n    function load_api() { \n\tlogger.wrtsm(\"bokeh-0.12.5.js loaded\")\n\twindow.ls = load_script \n\tload_script(\"https://cdn.pydata.org/bokeh/release/bokeh-api-0.12.5.min.js\" , function () { \n\t    console.log(\"[wrtsm]:: bokeh-api-0.12.5.min.js loaded\" )\n\t    //we will bubble an event that says wrtsm is ready ! \n\t    var event = new Event('wrtsm_ready');\n\t    window.dispatchEvent(event);\n\t} ) \n    } \n    logger.wrtsm(\"Loading Bokeh functionality:\") \n    load_script(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.js\" , load_api ) \n    load_css(\"https://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css\" , function () { console.log(\"[wrtsm]:: bokeh-0.12.5.min.css loaded\" ) } ) \n} \n// HANDLE BOKEH LOADING (load the content from cdn if Bokeh is not defined in the window) ======================================== > \n\n\n\n\n\n\n//var d = {\"misc\" : [\"dev_b_gyr_z\"] } \n\n//setTimeout( function() { window.d = flow.playback_gui(d) ; window.d[0].start_stream()  } , 1000)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}